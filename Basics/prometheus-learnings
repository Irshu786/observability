Prometheus
==========
Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud.

Prometheus collects and stores its metrics as time series data, i.e. metrics information is stored with the timestamp at which it was recorded, alongside optional key-value pairs called labels.

Prometheus's main features are:

1) a multi-dimensional data model with time series data identified by metric name and key/value pairs
2) PromQL, a flexible query language to leverage this dimensionality
3) no reliance on distributed storage; single server nodes are autonomous
4) time series collection happens via a pull model over HTTP
5) pushing time series is supported via an intermediary gateway
6) targets are discovered via service discovery or static configuration
7) multiple modes of graphing and dashboarding support


What are metrics?
Metrics are numerical measurements in layperson terms. 
The term time series refers to the recording of changes over time. What users want to measure differs from application to application. 
Ex: For a web server, it could be request times; for a database, it could be the number of active connections or active queries, and so on.



Components
The Prometheus ecosystem consists of multiple components, many of which are optional:

the main Prometheus server which scrapes and stores time series data
client libraries for instrumenting application code
a push gateway for supporting short-lived jobs
special-purpose exporters for services like HAProxy, StatsD, Graphite, etc.
an alertmanager to handle alerts

Why?
Prometheus works well for recording any purely numeric time series. It fits both machine-centric monitoring as well as monitoring of highly dynamic service-oriented architectures. 
In a world of microservices, its support for multi-dimensional data collection and querying is a particular strength.

Prometheus is designed for reliability, to be the system you go to during an outage to allow you to quickly diagnose problems. Each Prometheus server is standalone, not depending on network storage or other remote services. You can rely on it when other parts of your infrastructure are broken, and you do not need to setup extensive infrastructure to use it.

Why Not?
If you need 100% accuracy, such as for per-request billing, Prometheus is not a good choice as the collected data will likely not be detailed and complete enough.


Lets Begin:

global:
  scrape_interval:     15s
  evaluation_interval: 15s

The first, scrape_interval, controls how often Prometheus will scrape targets.
The evaluation_interval option controls how often Prometheus will evaluate rules. Prometheus uses rules to create new time series and to generate alerts.

promhttp_metric_handler_requests_total (the total number of /metrics requests the Prometheus server has served)

count(promhttp_metric_handler_requests_total)

For example, enter the following expression to graph the per-second HTTP request rate returning status code 200 happening in the self-scraped Prometheus:
*** rate(promhttp_metric_handler_requests_total{code="200"}[1m])


Other tools:
- Graphite
- InfluxDB
- OpenTSDB
- Nagios
- Sensu

BUILDING BLOCKS:
===============

Alert
An alert is the outcome of an alerting rule in Prometheus that is actively firing. Alerts are sent from Prometheus to the Alertmanager.

Alertmanager
The Alertmanager takes in alerts, aggregates them into groups, de-duplicates, applies silences, throttles, and then sends out notifications to email, Pagerduty, Slack etc.

Bridge
A bridge is a component that takes samples from a client library and exposes them to a non-Prometheus monitoring system. For example, the Python, Go, and Java clients can export metrics to Graphite.

Client library
A client library is a library in some language (e.g. Go, Java, Python, Ruby) that makes it easy to directly instrument your code, write custom collectors to pull metrics from other systems and expose the metrics to Prometheus.

Collector
A collector is a part of an exporter that represents a set of metrics. It may be a single metric if it is part of direct instrumentation, or many metrics if it is pulling metrics from another system.

Direct instrumentation
Direct instrumentation is instrumentation added inline as part of the source code of a program, using a client library.

Endpoint
A source of metrics that can be scraped, usually corresponding to a single process

Exporter
An exporter is a binary running alongside the application you want to obtain metrics from. The exporter exposes Prometheus metrics, commonly by converting metrics that are exposed in a non-Prometheus format into a format that Prometheus supports.

Instance
An instance is a label that uniquely identifies a target in a job.

Job
A collection of targets with the same purpose, for example monitoring a group of like processes replicated for scalability or reliability, is called a job.

Notification
A notification represents a group of one or more alerts, and is sent by the Alertmanager to email, Pagerduty, Slack etc.

Promdash
Promdash was a native dashboard builder for Prometheus. It has been deprecated and replaced by Grafana.

Prometheus
Prometheus usually refers to the core binary of the Prometheus system. It may also refer to the Prometheus monitoring system as a whole.

PromQL
PromQL is the Prometheus Query Language. It allows for a wide range of operations including aggregation, slicing and dicing, prediction and joins.

Pushgateway
The Pushgateway persists the most recent push of metrics from batch jobs. This allows Prometheus to scrape their metrics after they have terminated.

Recording Rules
Recording rules precompute frequently needed or computationally expensive expressions and save their results as a new set of time series.

Remote Read
Remote read is a Prometheus feature that allows transparent reading of time series from other systems (such as long term storage) as part of queries.

Remote Read Adapter
Not all systems directly support remote read. A remote read adapter sits between Prometheus and another system, converting time series requests and responses between them

Remote Read Endpoint
A remote read endpoint is what Prometheus talks to when doing a remote read.

Remote Write
Remote write is a Prometheus feature that allows sending ingested samples on the fly to other systems, such as long term storage.

Remote Write Adapter
Not all systems directly support remote write. A remote write adapter sits between Prometheus and another system, converting the samples in the remote write into a format the other system can understand.

Remote Write Endpoint
A remote write endpoint is what Prometheus talks to when doing a remote write.

Sample
A sample is a single value at a point in time in a time series.
In Prometheus, each sample consists of a float64 value and a millisecond-precision timestamp.

Silence
A silence in the Alertmanager prevents alerts, with labels matching the silence, from being included in notifications.

Target
A target is the definition of an object to scrape. For example, what labels to apply, any authentication required to connect, or other information that defines how the scrape will occur.

Time Series
The Prometheus time series are streams of timestamped values belonging to the same metric and the same set of labeled dimensions. Prometheus stores all data as time series.






